{
  "_args": [
    [
      {
        "raw": "https://github.com/bitfinexcom/sunbeam",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/bitfinexcom/sunbeam",
        "spec": "git+https://github.com/bitfinexcom/sunbeam.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:bitfinexcom/sunbeam.git",
          "sshUrl": "git+ssh://git@github.com/bitfinexcom/sunbeam.git",
          "httpsUrl": "git+https://github.com/bitfinexcom/sunbeam.git",
          "gitUrl": "git://github.com/bitfinexcom/sunbeam.git",
          "shortcut": "github:bitfinexcom/sunbeam",
          "directUrl": "https://raw.githubusercontent.com/bitfinexcom/sunbeam/master/package.json"
        }
      },
      "/Users/jplaster/Documents/jacobplaster/hackathon/eostrader"
    ]
  ],
  "_from": "git+https://github.com/bitfinexcom/sunbeam.git",
  "_id": "sunbeam@1.0.0",
  "_inCache": true,
  "_location": "/sunbeam",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/bitfinexcom/sunbeam",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/bitfinexcom/sunbeam",
    "spec": "git+https://github.com/bitfinexcom/sunbeam.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:bitfinexcom/sunbeam.git",
      "sshUrl": "git+ssh://git@github.com/bitfinexcom/sunbeam.git",
      "httpsUrl": "git+https://github.com/bitfinexcom/sunbeam.git",
      "gitUrl": "git://github.com/bitfinexcom/sunbeam.git",
      "shortcut": "github:bitfinexcom/sunbeam",
      "directUrl": "https://raw.githubusercontent.com/bitfinexcom/sunbeam/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/bitfinexcom/sunbeam.git#74bb3ac29251ce570a9d14121db3fd9ce577df33",
  "_shasum": "7ce08b95a7f869afacf7610e4da956afbbc1938b",
  "_shrinkwrap": null,
  "_spec": "https://github.com/bitfinexcom/sunbeam",
  "_where": "/Users/jplaster/Documents/jacobplaster/hackathon/eostrader",
  "author": {
    "name": "Robert",
    "email": "robert@bitfinex.com"
  },
  "dependencies": {
    "big.js": "^5.1.2",
    "eosjs": "^15.0.2"
  },
  "description": "JS lib for eosfinex",
  "devDependencies": {
    "@babel/core": "^7.0.0-beta.51",
    "@babel/plugin-transform-react-jsx": "^7.0.0-beta.53",
    "@babel/preset-env": "^7.0.0-beta.51",
    "@babel/preset-react": "^7.0.0-beta.53",
    "async": "^2.6.1",
    "babelify": "^9.0.0",
    "browserify": "^16.2.2",
    "express": "^4.16.3",
    "linkstate": "^1.1.1",
    "milligram": "^1.3.0",
    "mkdirp": "^0.5.1",
    "mocha": "^5.2.0",
    "normalize.css": "^8.0.0",
    "preact": "^8.2.9",
    "standard": "^11.0.1"
  },
  "gitHead": "74bb3ac29251ce570a9d14121db3fd9ce577df33",
  "keywords": [
    "eos",
    "bfx",
    "bitfinex"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "sunbeam",
  "optionalDependencies": {},
  "readme": "# sunbeam\n\n## Setup\n\nStart nodeos:\n\n```\nnodeos --data-dir ~/eosdata/ --config-dir ~/eosdata/ --contracts-console --http-validate-host=false\n```\n\n`--contracts-console` will output the logging from custom contracts\n\n## Examples\n\n### Node.js\n\n```\nnode example.js\n```\n\n### Browsers\n\nEnable CORS for your EOS node, by enabling it via config:\n\n```\ncd ~/eosdata/\n\necho \"access-control-allow-origin = *\" >> config.ini\n```\n\n#### Testpage in Browser\n\n```\n# delete cached eosjs\nrm test/browser-test/eosjs-dist.js\n\n# start\nnode test/browser-test/dev.js\n```\n\n#### Demo Exchange page\n\n```\n# delete cached eosjs\nrm test/browser-exchange/eosjs-dist.js\n\n# start\nnode test/browser-exchange/dev.js\n```\n\n\n## API\n\nYou can see all API calls in [example.js](example.js).\n\nThere are also browser demos available at [test/browser/](test/browser/).\n\n### `new Sunbeam(eos, ?opts)`\n - `eos` (object)\n  - `Eos` (object) the eosjs module you want to use\n  - `readNodeConf` (object) config for read node\n  - `writeNodeConf` (object )config for write node\n - `opts` (object)\n  - `account` (string) account name you want to use\n  - `dev` (boolean) don't check for seperate read/write node\n\nCreates a new Sunbeam instance. Currently you have to pass the eosjs library and config for a read and write node.\n\n**Example:**\n\n```js\nconst Sunbeam = require('sunbeam')\nconst Eos = require('eosjs')\n\nconst readNodeConf = {\n  httpEndpoint: 'http://localhost:8888',\n  keyProvider: [\n    '5Kci5UR4h25CM4vCyQMTQy4pzMhqXZ8vnocYJJkm2eQb8cfHsWV'\n  ]\n}\n\nconst writeNodeConf = {\n  httpEndpoint: 'http://writenode.example.com:8888',\n  keyProvider: [\n    '5Kci5UR4h25CM4vCyQMTQy4pzMhqXZ8vnocYJJkm2eQb8cfHsWV'\n  ]\n}\nconst eos = {\n  Eos,\n  readNodeConf,\n  writeNodeConf\n}\n\nconst opts = { account: 'testuser4321', dev: false }\nconst sb = new Sunbeam(eos, opts)\n```\n\n### `sunbeam.createOrder(order) => Order`\n - `order` (object)\n  - `symbol` (string) the symbol, e.g. `BTCUSD`\n  - `price` (string) the sell/buy price, omit for `EXCHANGE_MARKET` orders\n  - `amount` (string) the amount, set to negative value for selling\n  - `type`  (string) the order type, supported are `EXCHANGE_LIMIT` and `EXCHANGE_MARKET`\n  - `postOnly` (boolean) optional: insert order only if there is no match (maker)\n  - `clientId` (number) id to identify the id\n\nCreates an Order object for the eosfinex contract. Mimics the Bitfinex Api v2.\n\nFor market orders, the price must be omitted.\n\n**Example:**\n\n```js\nconst order = sb.createOrder({\n  symbol: 'BTCUSD',\n  price: '2100',\n  amount: '-14.99',\n  type: 'EXCHANGE_LIMIT',\n  clientId: '123'\n})\n```\n\n### `sunbeam.place(order, cb) => err, tx`\n - `order` (object)\n\nTakes a Sunbeam order object and sends it to the writing node. Returns tx details.\n\n**Example:**\n\n```js\nsb.place(order, (err, res) => {\n  if (err) throw err\n\n  console.log('placed \"sell\" order')\n  console.log(JSON.stringify(res, null, '  '))\n})\n```\n\n### `sunbeam.orderbook(symbol, opts, cb) => err, orderbook`\n  - `symbol` (string) the symbol, e.g. `BTCUSD`\n  - `opts` (object)\n    - `transform` (boolean) set true for an order book that is similar to the Bitfinex API v2\n\nRetrieves the order book for a given symbol from the read node.\n\n**Example:**\n\n```js\n// orderbook: bfx api v2 style (keyed)\nsb.orderbook('BTCUSD', { transform: true }, (err, res) => {\n  if (err) throw err\n\n  console.log('orderbook: bfx api v2 style (keyed)')\n  console.log(JSON.stringify(res, null, '  '))\n})\n\n// orderbook: raw\nsb.orderbook('BTCUSD', {}, (err, res) => {\n  if (err) throw err\n\n  console.log('orderbook: raw')\n  console.log(JSON.stringify(res, null, '  '))\n})\n```\n\n### `sunbeam.orders(symbol, opts, cb) => err, orderbook`\n  - `symbol` (string) the symbol, e.g. `BTCUSD`\n  - `opts` (object)\n    - `account` (boolean) optional: use different account than from initial `new Sunbeam`\n\nRetrieves the placed orders for an account.\n\n**Example:**\n\n```js\n// orders, uses account passed when Sunbeam instance was created\nsb.orders('BTCUSD', {}, (err, res) => {\n  if (err) throw err\n\n  console.log('orders, default account', opts.account)\n  console.log(JSON.stringify(res, null, '  '))\n})\n\n// orders, testuser1234\nsb.orders('BTCUSD', { user: 'testuser1234' }, (err, res) => {\n  if (err) throw err\n\n  console.log('orders, user testuser1234')\n  console.log(JSON.stringify(res, null, '  '))\n})\n```\n\n### `sunbeam.cancel(trade, opts, cb) => err, tx`\n  - `trade` (object)\n    - `id`: the id that was assigned by the contract\n    - `symbol` (string) symbol, e.g. `BTCUSD`\n    - `side` (string) possible values: `bid|ask`\n\n  - `opts` (object)\n\nCancels and order. Requires the id assigned by the contract, which can be retireved from reading the order book.\n\n**Example:**\n\n```js\nsb.cancel({\n  id: '1',\n  symbol: 'BTCUSD',\n  side: 'ask'\n}, {}, (err, res) => {\n  if (err) throw err\n\n  console.log(JSON.stringify(res, null, '  '))\n})\n```\n\n### `sunbeam.withdraw(data, opts, cb) => err, tx`\n  - `data` (object)\n    - `amount`: the id that was assigned by the contract\n    - `symbol` (string) symbol, e.g. `BTCUSD`\n    - `to` (string) optional: address to withdrawal to (defaults to current account)\n\n  - `opts` (object)\n\nWithdraws tokens from the exchange.\n\n**Example:**\n\n```\n$ cleos get currency balance efinexchange testuser4321\n925.0500000000 BTC\n99999.9400000000 USD\n\n$ cleos get currency balance efinextether testuser4321\n1000.0000000000 BTC\n```\n\n```js\nsb.withdraw({\n  currency: 'BTCUSD',\n  amount: '0.678'\n}, {}, (err, res) => {\n  if (err) throw err\n\n  console.log(JSON.stringify(res, null, '  '))\n})\n```\n\n```\n$ cleos get currency balance efinextether testuser4321\n1000.0000000000 BTC\n0.6780000000 USD\n```\n\n### `sunbeam.balance(cb) => err, balances`\n\nReturns the current wallet balance for the user.\n\n\n**Example:**\n\n```js\nsb.balance((err, res) => {\n  if (err) throw err\n\n  console.log(JSON.stringify(res, null, '  '))\n})\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "standard && mocha"
  },
  "version": "1.0.0"
}
